//#include "mytype.h"
//#include "hiduse.h"

#include "./CH554.H"
#include "./Debug.H"

#ifndef _descriptor_h_
#define _descriptor_h_

//Хемт▒ЖО╝х─╔У▒И├У╩Шичйр╣╣
typedef struct _DEVICE_DCESCRIPTOR_STRUCT
{
	UINT8	blength;                               //╔У▒И├У╩Шичх─Оой┌╩§┤злА
	UINT8	bDescriptorType;	                   //╔У▒И├У╩Шич└Ял═▒Я║┼
	UINT16	bcdUSB;                                //USB░Т▒Й║┼
	UINT8	bDeviceClass;                          //USBио┼Сх─╔У▒И└Я┤Щ┬в
	UINT8	bDeviceSubClass;                       //USBио┼Сх─ОМ└Я┤Щ┬в
	UINT8	bDeviceProtocol;                       //USBио┼Сх─╔У▒ИлГмж┤Щ┬в
	UINT8	bMaxPacketSize0;                       //Х╦хс0х─ОЬ┤з░Ч┤злА
	UINT16	idVendor;                              //│Д╔╠▒Я║┼
	UINT16	idProduct;                             //▓Щки▒Я║┼
	UINT16	bcdDevice;                             //╔У▒И│Ш│Д▒Я║┼
	UINT8	iManufacturer;                         //╔У▒И│Д╔╠Ооич┤«х─╦эм§
	UINT8	iProduct;                              //├У╩Ш▓ЩкиОоич┤«х─╦эм§
	UINT8	iSerialNumber;                         //├У╩Ш╔У▒ИлЫ┴л║┼Ооич┤«х─╦эм§
	UINT8	bNumConfigurations;                    //┐╔─▄х─┼Со├╩§┴┐
}DEVICE_DESCRIPTOR_STRUCT, *pDEVICE_DESCRIPTOR_STRUCT;


//Хемт▒ЖО╝х─┼Со├├У╩Шичйр╣╣
typedef struct _CONFIGURATION_DESCRIPTOR_STRUCT
{
	UINT8	bLength;                               //┼Со├├У╩Шичх─Оой┌╩§┤злА
	UINT8	bDescriptorType;                       //┼Со├├У╩Шич└Ял═▒Я║┼
	UINT16	wTotalLength;                          //┤╦┼Со├их╗пх─╦щМл╩§ЙП┤злА
	UINT8	bNumInterfaces;                        //┤╦┼Со├╦щоД│ох─йМ┐┌╩§┴┐
	UINT8	bConfigurationValue;                   //Set_Configuration├Ч┴Ь╦щлУмфх─▓╬╩§ох
	UINT8	iConfiguration;                        //├У╩ШИ├┼Со├х─Ооич┤«х─╦эм§ох
	UINT8	bmAttributes;                          //╣Еху─Б╩йх─ЛАны
	UINT8	MaxPower;                              //╔У▒И┤МО▄¤▀╠р╚Ах─ОЬ┤зху┴э
}CONFIGURATION_DESCRIPTOR_STRUCT, *pCONFIGURATION_DESCRIPTOR_STRUCT;


//Хемт▒ЖО╝х─йМ┐┌├У╩Шичйр╣╣
typedef struct _INTERFACE_DESCRIPTOR_STRUCT
{
	UINT8	bLength;                               //йМ┐┌├У╩Шичх─Оой┌╩§┤злА
	UINT8	bDescriptorType;                       //йМ┐┌├У╩Шичх─└Ял═▒Я║┼
	UINT8	bInterfaceNumber;                      //И├йМ┐┌х─▒Я║┼
	UINT8	bAlternateSetting;                     //▒ИМ├х─йМ┐┌├У╩Шич▒Я║┼
	UINT8	bNumEndpoints;                         //И├йМ┐┌╩╣М├х─Х╦хс╩§Бг▓╗░Ч└еХ╦хс0
	UINT8	bInterfaceClass;                       //йМ┐┌└Ял═
	UINT8	bInterfaceSubClass;                    //йМ┐┌ОМ└Ял═
	UINT8	bInterfaceProtocol;                    //йМ┐┌ОыЛГх─лГмж
	UINT8	iInterface;                            //├У╩ШИ├йМ┐┌х─Ооич┤«╦эм§ох
}INTERFACE_DESCRIPTOR_STRUCT, *pINTERFACE_DESCRIPTOR_STRUCT;


//Хемт▒ЖО╝х─Х╦хс├У╩Шичйр╣╣
typedef struct _ENDPOINT_DESCRIPTOR_STRUCT
{
	UINT8	bLength;                                //Х╦хс├У╩ШичОой┌╩§┤злА
	UINT8	bDescriptorType;                       //Х╦хс├У╩Шич└Ял═▒Я║┼
	UINT8	bEndpointAddress;                      //Х╦хсхпои╝░╩С╚в╩С│Ш╩Злн
	UINT8	bmAttributes;                          //Х╦хсх─┤Ф╩С└Ял═╩Злн
	UINT16	wMaxPacketSize;                        //Х╦хс╩НАбибх─ОЬ┤з░Ч┤злА
	UINT8	bInterval;                             //оэ╗Щ▓жЛ»Х╦хсх─╩▒╝С╝СИЗ
}ENDPOINT_DESCRIPTOR_STRUCT, * pENDPOINT_DESCRIPTOR_STRUCT;


//HID├У╩Шичолх─¤┬╝Х├У╩Шич║┼
typedef struct _HID_SUB_DESCRIPTOR_STRUCT
{
	UINT8	bDescriptorType;    //¤┬╝Х├У╩Шичх─└Ял═▒Я║┼
	UINT16	wDescriptorLength;  //¤┬╝Х├У╩Шичх─│цХ╚
}HID_SUB_DESCRIPTOR_STRUCT,*pHID_SUB_DESCRIPTOR_STRUCT;

#define NUM_SUB_DESCRIPTORS 1

//ХемтHID├У╩Шичйр╣╣
typedef struct _HID_DESCRIPTOR_STRUCT
{
	UINT8	bLength;
	UINT8	bDescriptorType;
	UINT16	bcdHID;
	UINT8	bCountryCode;
	UINT8	bNumDescriptors;
	HID_SUB_DESCRIPTOR_STRUCT	HidSubDescriptors[NUM_SUB_DESCRIPTORS]; 
}HID_DESCRIPTOR_STRUCT,*pHID_DESCRIPTOR_STRUCT;	


//м╗ИШОоич┤«├У╩Шичйр╣╣
typedef struct _STRING_DESCRIPTOR_STRUCT
{
	UINT8	bLength;							//Ооич┤«├У╩Шичх─Оой┌╩§┤злА
	UINT8	bDescriptorType;					//Ооич┤«├У╩Шич└Ял═▒Я║┼
	UINT8	StringDesriptor[36];					//UNICODE▒Я┬вх─Ооич┤«
}STRING_DESCRIPTOR_STRUCT, *pSTRING_DESCRIPTOR_STRUCT;

#define ENDPOINT_NUMBER 2
//Хемт┼Со├БгйМ┐┌БгХ╦хсх╚├У╩Шичйр╣╣╠т
typedef struct _USB_DESCRIPTOR_STRUCT
{
	CONFIGURATION_DESCRIPTOR_STRUCT	configuration_descriptor;
	INTERFACE_DESCRIPTOR_STRUCT		interface_descriptor;
	HID_DESCRIPTOR_STRUCT			hid_descriptor;
	ENDPOINT_DESCRIPTOR_STRUCT		endpoint_descriptor[ENDPOINT_NUMBER];
}USB_DESCRIPTOR_STRUCT, *pUSB_DESCRIPTOR_STRUCT;

//*******************************************************
// USB ╔У▒ИКвКз└Ял═Л┌┬в masks 
//*******************************************************
//(1) йМ╩Ний: D4...D0 
#define USB_RECIPIENT            0x1F
#define USB_RECIPIENT_DEVICE     0x00
#define USB_RECIPIENT_INTERFACE  0x01
#define USB_RECIPIENT_ENDPOINT   0x02

//(2) └Ял═: D6...D5
#define USB_REQUEST_TYPE		 0x60
#define USB_STANDARD_REQUEST     0x00
#define USB_CLASS_REQUEST        0x20
#define USB_VENDOR_REQUEST       0x40

//(3) ╩§ЙП┤Ф╩Сий¤Ы: D7
#define USB_ENDPOINT_DIRECTION_MASK   0x80

//хпоиЛ┌┬в
#define DEVICE_ADDRESS_MASK      0x7F

//(4) USB КвКзЕ
#define USB_REQUEST_MASK         (UINT8)0x0F

//(5) USBХ╦хсий¤ЫЛ┌┬в
#define USB_ENDPOINT_DIRECTION_OUT(addr)          (!((addr) & USB_ENDPOINT_DIRECTION_MASK))
#define USB_ENDPOINT_DIRECTION_IN(addr)           ((addr) & USB_ENDPOINT_DIRECTION_MASK)

//*******************************************************
// USB ╔У▒И├У╩Шич└Ял═
//*******************************************************
#define USB_DEVICE_DESCRIPTOR                0x01  //╔У▒И├У╩Шич
#define USB_CONFIGURATION_DESCRIPTOR         0x02  //┼Со├├У╩Шич
#define USB_STRING_DESCRIPTOR                0x03  //Ооич┤«├У╩Шич
#define USB_INTERFACE_DESCRIPTOR             0x04  //йМ┐┌├У╩Шич
#define USB_ENDPOINT_DESCRIPTOR              0x05  //Х╦хс├У╩Шич
#define USB_HID_DESCRIPTOR					 0x21  //HID├У╩Шич
#define USB_REPORT_DESCRIPTOR                0x22  //▒еИТ├У╩Шич
#define USB_PHYSICAL_DESCRIPTOR              0x23  //╬№└ь├У╩Шич

//*******************************************************
// ¤┬├Т╬ф╗щМ┌USB 1.0╣ТиХх─Н§╚иох
//*******************************************************
#define USB_REQUEST_GET_STATUS                    0x00
#define USB_REQUEST_CLEAR_FEATURE                 0x01
#define USB_REQUEST_SET_FEATURE                   0x03
#define USB_REQUEST_SET_ADDRESS                   0x05
#define USB_REQUEST_GET_DESCRIPTOR                0x06
#define USB_REQUEST_SET_DESCRIPTOR                0x07
#define USB_REQUEST_GET_CONFIGURATION             0x08
#define USB_REQUEST_SET_CONFIGURATION             0x09
#define USB_REQUEST_GET_INTERFACE                 0x0A
#define USB_REQUEST_SET_INTERFACE                 0x0B
#define USB_REQUEST_SYNC_FRAME                    0x0C

//******************************************************
//** USB ╠плнЛАныич
//******************************************************
#define USB_FEATURE_ENDPOINT_STALL          0x0000
#define USB_FEATURE_REMOTE_WAKEUP           0x0001
#define USB_FEATURE_POWER_D0                0x0002
#define USB_FEATURE_POWER_D1                0x0003
#define USB_FEATURE_POWER_D2                0x0004
#define USB_FEATURE_POWER_D3                0x0005

//******************************************************
//** USB ┼Со├├У╩Шич
//******************************************************
#define USB_CONFIG_POWERED_MASK                   0xc0
#define USB_CONFIG_BUS_POWERED                    0x80
#define USB_CONFIG_SELF_POWERED                   0x40
#define USB_CONFIG_REMOTE_WAKEUP                  0x20

#define BUS_POWERED                           0x80
#define SELF_POWERED                          0x40
#define REMOTE_WAKEUP                         0x20

//******************************************************
//** USB Х╦хс├У╩Шичйр╣╣╠т: Х╦хс┤Ф╩С╩Злн
//******************************************************
#define USB_ENDPOINT_TYPE_MASK                    0x03

#define USB_ENDPOINT_TYPE_CONTROL                 0x00
#define USB_ENDPOINT_TYPE_ISOCHRONOUS             0x01
#define USB_ENDPOINT_TYPE_BULK                    0x02
#define USB_ENDPOINT_TYPE_INTERRUPT               0x03

/*******************************************************
** USB  ╔У▒И└Я
********************************************************/
#define USB_DEVICE_CLASS_RESERVED           0x00
#define USB_DEVICE_CLASS_AUDIO              0x01
#define USB_DEVICE_CLASS_COMMUNICATIONS     0x02
#define USB_DEVICE_CLASS_HUMAN_INTERFACE    0x03
#define USB_DEVICE_CLASS_MONITOR            0x04
#define USB_DEVICE_CLASS_PHYSICAL_INTERFACE 0x05
#define USB_DEVICE_CLASS_POWER              0x06
#define USB_DEVICE_CLASS_PRINTER            0x07
#define USB_DEVICE_CLASS_STORAGE            0x08
#define USB_DEVICE_CLASS_HUB                0x09
#define USB_DEVICE_CLASS_VENDOR_SPECIFIC    0xFF
#define USB_CLASS_CODE_TEST_CLASS_DEVICE	0xdc

/*****   D12 йМ┐┌├У╩Шичол: │§Х╦хс0х─Х╦хс╦эм§╩§─┐  ******/
//#define ENDPOINT_NUMBER	4  //мЛн┌┤╦╬─╝■К░├ТХемт

//(1) Х╦хс0ОЬ┤зиоОж┤злА
#define EP0_TX_FIFO_SIZE   16
#define EP0_RX_FIFO_SIZE   16
#define EP0_PACKET_SIZE    16

//(2) Х╦хс1 йМ╩Н╗Ыиб╦═х─ОЬ┤зл┼¤б░Ч┤злА
#define EP1_TX_FIFO_SIZE   16
#define EP1_RX_FIFO_SIZE   16
#define EP1_PACKET_SIZE    16

//(3) Х╦хс1 йМ╩Н╗Ыиб╦═х─ОЬ┤зл┼¤б░Ч┤злА
#define EP2_TX_FIFO_SIZE   64
#define EP2_RX_FIFO_SIZE   64
#define EP2_PACKET_SIZE    64

//Х╦хс║┼Хемт
#define CONTROL_POINT_OUT        0x00
#define CONTROL_POINT_IN         0x80
#define POINT_1_OUT              0x01
#define POINT_1_IN               0x81
#define MAIN_POINT_OUT           0x02
#define MAIN_POINT_IN            0x82

extern code DEVICE_DESCRIPTOR_STRUCT device_descriptor;
extern code USB_DESCRIPTOR_STRUCT usb_descriptor;
extern code UINT8 LANGUAGE_ID[4];
extern code UINT8 device_serial_number[22];
extern code UINT8 ManufacturerString[80];
extern code UINT8 ProducterString[96];

#endif